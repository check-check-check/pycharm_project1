
正则表达式概述总结：
1.模式和被搜索的字符串既可以是 Unicode 字符串 (str) ，也可以是8位字节串 (bytes);
2.正则表达式使用反斜杠字符 ('\') 来表示特殊形式或是允许在使用特殊字符时不引发它们的特殊含义。这会与Python的字符串字面值中对相同
  字符出于相同目的的用法产生冲突；
3.在带有 'r' 前缀的字符串字面值中，反斜杠不必做任何特殊处理;

正则表达式格式说明总结：
1.正则表达式可以包含普通或者特殊字符 可以拼接普通字符，例如：'a','last','|'
2.特殊字符既可以表示它的普通含义， 也可以影响它旁边的正则表达式的解释
3.重复修饰符 (*, +, ?, {m,n}, 等) 不能直接嵌套,要应用一个内层重复嵌套，可以使用括号

特殊字符总结说明：
.： (点) 在默认模式，匹配除了换行的任意字符
^： (插入符号) 匹配字符串的开头
$： 匹配字符串尾或者换行符的前一个字符
*:  对它前面的正则式匹配0到任意次重复， 尽量多的匹配字符串
+:  对它前面的正则式匹配1到任意次重复
?:  对它前面的正则式匹配0到1次重复
*?, +?, ??: '*', '+'，和 '?' 修饰符都是 贪婪的；它们在字符串进行尽可能多的匹配
{m}:  对其之前的正则式指定匹配 m 个重复；少于 m 的话就会导致匹配失败
{m,n}:  对正则式进行 m 到 n 次匹配，在 m 和 n 之间取尽量多
{m,n}?:  前一个修饰符的非贪婪模式，只匹配尽量少的字符次数
\:  转义特殊字符（允许你匹配 '*', '?', 或者此类其他）
[]: 用于表示一个字符集合。在一个集合中
    --字符可以单独列出，比如 [amk] 匹配 'a'， 'm'， 或者 'k'
    --可以表示字符范围，通过用 '-' 将两个字符连起来。比如 [a-z] 将匹配任何小写ASCII字符
    --特殊字符在集合中，失去它的特殊含义。比如 [(+*)] 只会匹配这几个文法字符 '(', '+', '*', or ')'
    --字符类如 \w 或者 \S (如下定义) 在集合内可以接受，它们可以匹配的字符由 ASCII 或者 LOCALE 模式决定
    --比如 [^5] 将匹配所有字符，除了 '5'， [^^] 将匹配所有字符，除了 '^'. ^ 如果不在集合首位，就没有特殊含义
    --在集合内要匹配一个字符 ']'，有两种方法，要么就在它之前加上反斜杠，要么就把它放到集合首位。比如， [()[\]{}]
      和 []()[{}] 都可以匹配括号
|：      A|B， A 和 B 可以是任意正则表达式，创建一个正则表达式，匹配 A 或者 B
(...)： （组合），匹配括号内的任意正则表达式，并标识出组合的开始和结尾。
(?…)：   这是个扩展标记法 （一个 '?' 跟随 '(' 并无含义）
(?aiLmsux)：( 'a', 'i', 'L', 'm', 's', 'u', 'x' 中的一个或多个) 这个组合匹配一个空字符串
(?:…)：  正则括号的非捕获版本。 匹配在括号内的任何正则表达式，但该分组所匹配的子字符串
(?aiLmsux-imsx:…)： ('a', 'i', 'L', 'm', 's', 'u', 'x' 中的0或者多个， 之后可选跟随 '-' 在后面跟随 'i' , 'm' , 's' , 'x' 中的一到多个 .)
(?P<name>…)：  （命名组合）类似正则组合，但是匹配到的子串组在外部是通过定义的 name 来获取的

由 '\' 和一个字符组成的特殊序列在以下列出。 如果普通字符不是ASCII数位或者ASCII字母，那么正则样式将匹配第二个字符。比如，\$
匹配字符 '$'
\number
匹配数字代表的组合。每个括号是一个组合，组合从1开始编号
\A
只匹配字符串开始
\b
匹配空字符串，但只在单词开始或结尾的位置
\B
匹配空字符串，但 不 能在词的开头或者结尾
\d
对于 Unicode (str) 样式：匹配任何Unicode十进制数（就是在Unicode字符目录[Nd]里的字符.这包括了 [0-9] ，和很多其他的数字字符。
如果设置了 ASCII 标志，就只匹配 [0-9]
对于8位(bytes)样式：匹配任何十进制数，就是 [0-9]
\D
匹配任何非十进制数字的字符。就是 \d 取非。 如果设置了 ASCII 标志，就相当于 [^0-9]
\s
对于 Unicode (str) 样式：匹配任何Unicode空白字符（包括 [ \t\n\r\f\v] ，还有很多其他字符，比如不同语言排版规则约定的不换行
空格）。如果 ASCII 被设置，就只匹配 [ \t\n\r\f\v] 。
对于8位(bytes)样式：匹配ASCII中的空白字符，就是 [ \t\n\r\f\v]
\S
匹配任何非空白字符。就是 \s 取非。如果设置了 ASCII 标志，就相当于 [^ \t\n\r\f\v] 。
\w
对于 Unicode (str) 样式：
匹配Unicode词语的字符，包含了可以构成词语的绝大部分字符，也包括数字和下划线。如果设置了 ASCII 标志，就只匹配 [a-zA-Z0-9_] 。
对于8位(bytes)样式：
匹配ASCII字符中的数字和字母和下划线，就是 [a-zA-Z0-9_] 。如果设置了 LOCALE 标记，就匹配当前语言区域的数字和字母和下划线。
\W
匹配任何不是单词字符的字符。 这与 \w 正相反。 如果使用了 ASCII 旗标，这就等价于 [^a-zA-Z0-9_]。 如果使用了 LOCALE 旗标，则会
匹配在当前区域设置中不是字母数字又不是下划线的字符。
\Z
只匹配字符串尾。



